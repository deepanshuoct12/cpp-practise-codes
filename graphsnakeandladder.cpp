#include<iostream>
#include<list>
#include<map>
#include<iterator>
#include<queue>
#include<climits>
using namespace std;
template < typename T>

class Graph
{
    map<T,list<T> >adjlist;

public:

    Graph()
    {
    }

    void addedge(T u,T v,bool bidir = true)
    {
        adjlist[u].push_back(v);

        if(bidir)
        {
            adjlist[v].push_back(u);
        }
    }

    void print()
    {
//        template<typename T>
      /*  map<T,list<T> >::iterator it;
        for(it = adjlist.begin() ;it!=adjlist.end() ;it++)
        {
            cout<<it->first<<"->"<<it->second;
        }*/
        for(auto i:adjlist)
        {
             cout<<i.first<<"-->";
               for(T entry : i.second)
                     {cout<<entry<<",";
                     }
                      cout<<"\n";
        }

    }

    int bfs(T src,T dest)
    {
         queue<T>q;
        map<T,bool> visited;
        map<T,int>dist;
        map<T,T>parent;
        q.push(src);

        for(auto i:adjlist)
        dist[i.first]=INT_MAX;

          //visited[src]=true;
          dist[src]=0;

        while(!q.empty())
        {
            T node=q.front();
           // cout<<node<<" ";
            q.pop();

            for(auto neighbour: adjlist[node])
            {
                if(dist[neighbour]==INT_MAX)
                {
                    q.push(neighbour);
                    dist[neighbour]=dist[node]+1;
                    //visited[neighbour]=true;
                    parent[neighbour]=node;
                }
            }
        }

        T temp = dest;
        while(temp!=src)
        {
            //cout<<temp<<"<--";
            temp=parent[temp];
        }
       // cout<<src;
        cout<<"\n";
        return dist[dest];
    }


};

int main()
{



         int t;cin>>t;
         while(t--){

                int n;
				int board[150]={0};
				Graph<int> g;
         cin>>n;
         while(n--){

            int s,e;
            cin>>s>>e;
            board[s]=e-s;
		//	cout<<board[s]<<":";
         }
            int m;cin>>m;
            while(m--){
                int st,en;
				cin>>st>>en;
                board[st]=en-st;
			//	cout<<board[st]<<"--";
            }

     /*    board[2]=13;
         board[5]=2;
         board[9]=18;
         board[18]=11;
         board[17]=-13;
         board[20]=-14;
         board[24]=-8;
         board[25]=-10;
         board[32]=-2;
         board[34]=-22; */

         for(int i=0;i<=100;i++)
         {  int u=i;

             for(int dice = 1;dice<=6;dice++)
             {
                 int v=u+dice+board[u+dice];
                 g.addedge(u,v,false);

             }
         }
              // g.print();

     cout<<g.bfs(0,100)<<"\n";
         }

}
/*
0-->1,2,3,4,5,6,
1-->2,3,4,5,6,7,
2-->3,4,5,6,7,8,
3-->4,5,6,7,8,9,
4-->5,6,7,8,9,10,
5-->6,7,8,9,10,11,
6-->7,8,9,10,11,98,
7-->8,9,10,11,98,13,
8-->9,10,11,98,13,14,
9-->10,11,98,13,14,15,
10-->11,98,13,14,15,16,
11-->98,13,14,15,16,17,
12-->13,14,15,16,17,18,
13-->14,15,16,17,18,19,
14-->15,16,17,18,19,20,
15-->16,17,18,19,20,21,
16-->17,18,19,20,21,22,
17-->18,19,20,21,22,23,
18-->19,20,21,22,23,24,
19-->20,21,22,23,24,25,
20-->21,22,23,24,25,26,
21-->22,23,24,25,26,27,
22-->23,24,25,26,27,28,
23-->24,25,26,27,28,29,
24-->25,26,27,28,29,30,
25-->26,27,28,29,30,31,
26-->27,28,29,30,31,62,
27-->28,29,30,31,62,33,
28-->29,30,31,62,33,34,
29-->30,31,62,33,34,35,
30-->31,62,33,34,35,36,
31-->62,33,34,35,36,37,
32-->33,34,35,36,37,38,
33-->34,35,36,37,38,39,
34-->35,36,37,38,39,40,
35-->36,37,38,39,40,41,
36-->37,38,39,40,41,68,
37-->38,39,40,41,68,43,
38-->39,40,41,68,43,44,
39-->40,41,68,43,44,45,
40-->41,68,43,44,45,46,
41-->68,43,44,45,46,47,
42-->43,44,45,46,47,48,
43-->44,45,46,47,48,47,
44-->45,46,47,48,47,50,
45-->46,47,48,47,50,51,
46-->47,48,47,50,51,52,
47-->48,47,50,51,52,53,
48-->47,50,51,52,53,54,
49-->50,51,52,53,54,55,
50-->51,52,53,54,55,56,
51-->52,53,54,55,56,57,
52-->53,54,55,56,57,58,
53-->54,55,56,57,58,59,
54-->55,56,57,58,59,60,
55-->56,57,58,59,60,61,
56-->57,58,59,60,61,62,
57-->58,59,60,61,62,63,
58-->59,60,61,62,63,64,
59-->60,61,62,63,64,65,
60-->61,62,63,64,65,66,
61-->62,63,64,65,66,17,
62-->63,64,65,66,17,68,
63-->64,65,66,17,68,69,
64-->65,66,17,68,69,70,
65-->66,17,68,69,70,71,
66-->17,68,69,70,71,72,
67-->68,69,70,71,72,73,
68-->69,70,71,72,73,74,
69-->70,71,72,73,74,19,
70-->71,72,73,74,19,76,
71-->72,73,74,19,76,77,
72-->73,74,19,76,77,78,
73-->74,19,76,77,78,27,
74-->19,76,77,78,27,80,
75-->76,77,78,27,80,81,
76-->77,78,27,80,81,82,
77-->78,27,80,81,82,83,
78-->27,80,81,82,83,84,
79-->80,81,82,83,84,85,
80-->81,82,83,84,85,86,
81-->82,83,84,85,86,87,
82-->83,84,85,86,87,88,
83-->84,85,86,87,88,89,
84-->85,86,87,88,89,90,
85-->86,87,88,89,90,91,
86-->87,88,89,90,91,92,
87-->88,89,90,91,92,37,
88-->89,90,91,92,37,94,
89-->90,91,92,37,94,13,
90-->91,92,37,94,13,96,
91-->92,37,94,13,96,25,
92-->37,94,13,96,25,98,
93-->94,13,96,25,98,99,
94-->13,96,25,98,99,4221396,
95-->96,25,98,99,4221396,101,
96-->25,98,99,4221396,101,-1215920282,
97-->98,99,4221396,101,-1215920282,1845090551,
98-->99,4221396,101,-1215920282,1845090551,1424046248,
99-->4221396,101,-1215920282,1845090551,1424046248,32869,
100-->101,-1215920282,1845090551,1424046248,32869,106,


shortest distance2147483647
*/

